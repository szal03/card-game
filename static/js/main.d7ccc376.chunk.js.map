{"version":3,"sources":["components/ModeButton.js","components/singleMode/SingleGameComputer.js","components/singleMode/SingleGame.js","components/singleMode/SinglePlayerMode.js","components/multiMode/MultiGame.js","components/multiMode/MultiPlayerMode.js","App.js","serviceWorker.js","index.js"],"names":["ModeButton","props","className","onClick","click","text","SingleGameComputer","computerPoints","style","color","PlayerCards","cards","map","card","index","key","src","image","alt","suit","SingleGame","buttonAdd","buttonPass","buttonBack","addButtonStatus","buttonPlayAgain","userPoints","userWin","userCards","computerWin","remis","disabled","SinglePlayerMode","countPoints","cardValueText","cardValue","parseInt","checkAs","actualAsTable","state","asTable","value","push","setState","length","gameWin","activePassButton","checkAsComputer","asTableComputer","gameWinComputer","handleTwoRandomCards","cardValueTextForComputer","tmpArray","pointsFromCards","tmpForComputer","pointsFromCardsForComputer","i","firstCardsIndex","Math","floor","random","firstCard","cardDeckSingleGame","firstCardsForComputerIndex","firstCardForComputer","gameStart","computerCards","handleAddCard","pointsFromAddingCard","deck","actualUserCards","addingCard","handlePassButton","handleComputerProcedure","winPointsUser","handleCheckScore","points","userAbsPoints","abs","computerAbsPoints","handleBackButtonSinglePlayerMode","computerActive","winPointsComputer","activePassButtonComputer","actualComputerCards","activePassButtonStatus","backButton","this","marginTop","passButtonStatus","computerStart","React","Component","ShowCardsSummary","playerCards","userTable","playerId","buttonClose","PlayersTable","players","player","userId","name","PlayerContent","content","activePlayer","filter","status","userActiveStatus","playerName","userStatus","addButton","passButton","usersTable","summaryCardShow","buttonShowCards","gameWiner","Alert","buttonCloseAlert","allPlayers","lastPlayerName","fontSize","margin","SummaryTable","showCards","MultiGame","gameEnd","persianEye","showAlert","MultiPlayerMode","handleChange","e","inputValue","target","numberOfUsers","createPlayers","number","table","arrayForCards","win","active","j","cardDeckMultiGame","gameLose","handleSubmit","preventDefault","playersNumber","submit","handleGameStart","handleEndGame","handleAddCardButton","id","selectPlayer","selectUserPoints","selectUserCards","selectUserAsTable","selectUserGameWin","selectUserActiveStatus","usersTableActive","nameWinner","usersToCheck","winName","userPoints1","user1Id","user1name","userPoints2","user2Id","user2name","sort","a","b","firstValue","firstValueId","firstValueName","winnerTab","handleBackButton","handlePlayAgain","n","handleShowInfo","infoShow","handleHideInfo","setInterval","handleShowCards","handleButtonClose","handleButtonCloseAlert","onSubmit","noValidate","htmlFor","type","step","min","max","onChange","onMouseEnter","onMouseLeave","boxShadow","transform","App","singleMode","multiMode","cardDeck","handleSingleGame","handleMultiGame","fetch","then","response","ok","Error","json","data","catch","error","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d7ccc376.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './style/ModeButton.css'\r\n\r\n\r\nconst ModeButton=(props)=>{\r\n    return(\r\n        <button className='modeButton'\r\n                onClick={props.click}><span>{props.text}</span></button>\r\n    )\r\n}\r\nexport default ModeButton;","import React from \"react\";\r\n\r\nconst SingleGameComputer =(props)=>{\r\n          const{computerPoints}=props;\r\n           return(<div>\r\n              <h1>Przeciwnik</h1>\r\n               <div className=\"playerScore\">\r\n                   <span style={computerPoints>21? {color: \"red\"}:null}>Wynik przeciwnika: {computerPoints}</span>\r\n               </div>\r\n\r\n           </div>)\r\n\r\n\r\n\r\n}\r\nexport default SingleGameComputer;","import React from \"react\";\r\nimport SingleGameComputer from \"./SingleGameComputer\";\r\nimport '../style/SingleGame.css'\r\n\r\n\r\nconst PlayerCards=(props)=>{\r\n    const userCards=props.cards.map((card,index)=>(\r\n        <div key={index} className=\"imgBox\">\r\n            <img src={card.image} alt={card.suit}/>\r\n        </div>\r\n    ))\r\n    return userCards;\r\n\r\n}\r\n\r\nconst SingleGame=(props)=>{\r\n    const {buttonAdd,\r\n        buttonPass,\r\n        buttonBack,\r\n        addButtonStatus,\r\n        buttonPlayAgain,\r\n        userPoints,\r\n        userWin,userCards,\r\n        computerPoints,\r\n        computerWin,remis}=props;\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"backButtonBox\">\r\n                <button className='modeButtonBack' onClick={buttonBack}><span>Powrót</span></button>\r\n            </div>\r\n\r\n            <div>\r\n                <SingleGameComputer\r\n                    computerPoints={computerPoints}/>\r\n            </div>\r\n            {userWin? <div>\r\n                <h1>Wygrał Gracz</h1>\r\n                <button className=\"gameButtons\"\r\n                        onClick={buttonPlayAgain}><span>Zagraj ponownie</span></button>\r\n                </div>: null}\r\n            {computerWin? <div><h1>Wygrał Przeciwnik</h1>\r\n                <button className=\"gameButtons\"\r\n                        onClick={buttonPlayAgain}><span>Zagraj ponownie</span></button>\r\n            </div>: null}\r\n            {remis? <div><h1>Remis</h1>\r\n                <button className=\"gameButtons\"\r\n                        onClick={buttonPlayAgain}><span>Zagraj ponownie</span></button>\r\n            </div>:null}\r\n            <div className=\"userContainer\">\r\n                <h1>Gracz</h1>\r\n                <div className=\"userCardContainer\">\r\n                    <PlayerCards cards={userCards}/>\r\n                </div>\r\n                <div className=\"playerScore\">\r\n                    <span style={userPoints>21 && !userWin? {color: \"red\"}:null}>Wynik gracza: {userPoints}</span>\r\n                </div>\r\n                <div className=\"userButtonsContainer\">\r\n                    <button className=\"gameButtons\"\r\n                            onClick={buttonAdd}\r\n                            disabled={addButtonStatus}><span>Pobierz kartę</span></button>\r\n                    <button className=\"gameButtons\"\r\n                            onClick={buttonPass}\r\n                            disabled={addButtonStatus}><span>Pas</span></button>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleGame;","import React from \"react\";\r\nimport SingleGame from \"./SingleGame\";\r\nimport '../style/ModeButton.css'\r\n\r\nclass SinglePlayerMode extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            cardDeckSingleGame: props.deck,\r\n            userCards:[],\r\n            userPoints:0,\r\n            asTable:[],\r\n            gameStart: false,\r\n            gameWin: false,\r\n            winPointsUser: false,\r\n            activePassButton: false,\r\n            activePassButtonStatus:false,\r\n\r\n            computerCards:[],\r\n            computerPoints:0,\r\n            asTableComputer:[],\r\n            computerActive: true,\r\n            winPointsComputer: false,\r\n            activePassButtonComputer: false,\r\n            gameWinComputer: false,\r\n            remis: false,\r\n        }\r\n    }\r\n\r\n    countPoints=(cardValueText)=>{\r\n        let cardValue;\r\n        if(cardValueText === \"JACK\"){ cardValue = 2;}\r\n        else if(cardValueText === \"ACE\"){ cardValue = 11;}\r\n        else if(cardValueText === \"KING\"){ cardValue = 4;}\r\n        else if(cardValueText === \"QUEEN\"){ cardValue = 3;}\r\n        else{\r\n            parseInt(cardValueText)\r\n            cardValue=2;\r\n        }\r\n        return cardValue;\r\n    }\r\n\r\n    checkAs=(card)=>{\r\n        const actualAsTable = this.state.asTable;\r\n        if(card.value===\"ACE\"){\r\n            actualAsTable.push(card);\r\n            this.setState({\r\n                asTable: actualAsTable\r\n            })\r\n        }\r\n        if(this.state.asTable.length===2){\r\n            this.setState({\r\n                gameWin: true,\r\n                activePassButton: true\r\n            })\r\n        }\r\n    }\r\n\r\n    checkAsComputer=(card)=>{\r\n        const actualAsTable = this.state.asTableComputer;\r\n        if(card.value===\"ACE\"){\r\n            actualAsTable.push(card);\r\n            this.setState({\r\n                asTableComputer: actualAsTable\r\n            })\r\n        }\r\n        if(this.state.asTableComputer.length===2){\r\n            this.setState({\r\n                gameWinComputer: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    handleTwoRandomCards=()=>{\r\n        let tmpArray=[];\r\n        let cardValueText='';\r\n        let points;\r\n        let pointsFromCards=0;\r\n        /* variables for computer */\r\n        let tmpForComputer=[];\r\n        let cardValueTextForComputer;\r\n        let pointsForComputer;\r\n        let pointsFromCardsForComputer=0;\r\n        for(let i=0; i<=1; i++){\r\n            let firstCardsIndex = Math.floor(Math.random()*51);\r\n            let firstCard = this.state.cardDeckSingleGame[firstCardsIndex];\r\n            cardValueText=firstCard.value;\r\n            points=this.countPoints(cardValueText);\r\n            pointsFromCards=pointsFromCards+points;\r\n            this.checkAs(firstCard);\r\n            tmpArray.push(firstCard);\r\n            /* for computer*/\r\n            let firstCardsForComputerIndex = Math.floor(Math.random()*51);\r\n            let firstCardForComputer = this.state.cardDeckSingleGame[firstCardsForComputerIndex];\r\n            cardValueTextForComputer=firstCardForComputer.value;\r\n            pointsForComputer = this.countPoints(cardValueTextForComputer);\r\n            pointsFromCardsForComputer=pointsFromCardsForComputer+pointsForComputer;\r\n            this.checkAsComputer(firstCardForComputer);\r\n            tmpForComputer.push(firstCardForComputer);\r\n\r\n        }\r\n        this.setState({\r\n            userCards: tmpArray,\r\n            userPoints: pointsFromCards,\r\n            gameStart: true,\r\n\r\n            computerCards:tmpForComputer,\r\n            computerPoints:pointsFromCardsForComputer,\r\n        })\r\n    }\r\n\r\n    handleAddCard=()=>{\r\n        let pointsFromAddingCard=0;\r\n        const deck = this.state.cardDeckSingleGame;\r\n        const actualUserCards = this.state.userCards;\r\n        let userPoints = this.state.userPoints;\r\n        let randomCardIndex = Math.floor(Math.random()*51);\r\n        let addingCard = deck[randomCardIndex];\r\n        this.checkAs(addingCard);\r\n        pointsFromAddingCard=this.countPoints(addingCard.value);\r\n        actualUserCards.push(addingCard);\r\n        userPoints=userPoints+pointsFromAddingCard;\r\n        if(userPoints===21){\r\n            this.setState({\r\n                gameWin: true,\r\n                activePassButton: true\r\n            })\r\n        }else if(userPoints>=22 && this.state.asTable.length!==2){\r\n            this.setState({\r\n                gameWinComputer: true,\r\n                activePassButton: true,\r\n            })\r\n        }\r\n        this.setState({\r\n                userCards: actualUserCards,\r\n                userPoints: userPoints,\r\n        })}\r\n\r\n    handlePassButton=()=>{\r\n        this.handleComputerProcedure();\r\n        const userActualPoints=this.state.userPoints;\r\n        if(userActualPoints===21){\r\n            this.setState({\r\n                activePassButton: true,\r\n                winPointsUser: true,\r\n            })\r\n        }\r\n       else{\r\n            this.setState({\r\n                activePassButton: true,\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    handleCheckScore=(points)=>{\r\n        const userPoints=this.state.userPoints;\r\n        const computerPoints=points;\r\n        const winResult = 21;\r\n        const userAbsPoints=Math.abs(winResult-userPoints);\r\n        const computerAbsPoints=Math.abs(winResult-computerPoints);\r\n        if(userPoints<22 && computerPoints<22){\r\n            if(userAbsPoints<computerAbsPoints){\r\n                this.setState({\r\n                    gameWin: true,\r\n                })\r\n            }else if(userAbsPoints>computerAbsPoints){\r\n                this.setState({\r\n                    gameWinComputer: true,\r\n                })\r\n            }\r\n            else{\r\n                this.setState({\r\n                    remis: true,\r\n                })\r\n            }\r\n        }else if(userPoints>=22 && computerPoints<22){\r\n            this.setState({\r\n                gameWinComputer: true,\r\n            })\r\n        }else if(computerPoints>=22 && userPoints<22){\r\n            this.setState({\r\n                gameWin: true,\r\n            })\r\n        }else{\r\n            this.setState({\r\n                remis: true,\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n\r\n    handleBackButtonSinglePlayerMode=()=>{\r\n        this.setState({\r\n            gameStart: false,\r\n            activePassButton: false,\r\n            userCards:[],\r\n            userPoints:0,\r\n            asTable:[],\r\n            gameWin: false,\r\n            winPointsUser: false,\r\n\r\n            computerCards:[],\r\n            computerPoints:0,\r\n            asTableComputer:[],\r\n            computerActive: true,\r\n            winPointsComputer: false,\r\n            activePassButtonComputer: false,\r\n            gameWinComputer: false,\r\n            remis: false,\r\n        })\r\n    }\r\n\r\n    handleComputerProcedure=()=>{\r\n        let points = this.state.computerPoints;\r\n        const deck = this.state.cardDeckSingleGame;\r\n        let actualComputerCards = this.state.computerCards;\r\n        while(this.state.computerActive===true){\r\n            if(points<=17){\r\n                let pointsFromAddingCard=0;\r\n                let randomCardIndex = Math.floor(Math.random()*51);\r\n                let addingCard = deck[randomCardIndex];\r\n                this.checkAsComputer(addingCard);\r\n                pointsFromAddingCard=this.countPoints(addingCard.value);\r\n                actualComputerCards.push(addingCard);\r\n                points=points+pointsFromAddingCard;\r\n            }\r\n            else if(points<=20){\r\n                let randomNumber = Math.floor(Math.random()*2);\r\n               if(randomNumber===1){\r\n                   let pointsFromAddingCard=0;\r\n                   let randomCardIndex = Math.floor(Math.random()*51);\r\n                   let addingCard = deck[randomCardIndex];\r\n                   this.checkAsComputer(addingCard);\r\n                   pointsFromAddingCard=this.countPoints(addingCard.value);\r\n                   actualComputerCards.push(addingCard);\r\n                   points=points+pointsFromAddingCard;\r\n\r\n               }else{\r\n                   this.setState({\r\n                       computerActive: false,\r\n                       activePassButtonComputer: true,\r\n                       computerCards: actualComputerCards,\r\n                       computerPoints: points,\r\n                   })\r\n                   break;\r\n               }\r\n            }\r\n            else if(points === 21){\r\n                this.setState({\r\n                    computerActive: false,\r\n                    activePassButtonComputer: true,\r\n                    computerCards: actualComputerCards,\r\n                    computerPoints: points,\r\n                    winPointsComputer: true,\r\n                })\r\n                break;\r\n            }\r\n            else{\r\n                this.setState({\r\n                    computerActive: false,\r\n                    activePassButtonComputer: true,\r\n                    computerCards: actualComputerCards,\r\n                    computerPoints: points,\r\n                })\r\n                break;\r\n            }\r\n        }\r\n        this.handleCheckScore(points);\r\n    }\r\n\r\n    render(){\r\n        const {backButton} = this.props;\r\n        return(\r\n            <div className=\"mainContianer\" style={{marginTop: '1vh'}}>\r\n                <div className=\"gameTitle\" >\r\n                    <h1>Rozgrywka dla pojedyńczego gracza</h1>\r\n                </div>\r\n                <div className=\"contentContainer\">\r\n                    {this.state.gameStart? <div><SingleGame\r\n                            buttonAdd={this.handleAddCard}\r\n                            buttonPass={this.handlePassButton}\r\n                            buttonBack={this.handleBackButtonSinglePlayerMode}\r\n                            buttonPlayAgain={this.handleBackButtonSinglePlayerMode}\r\n                            addButtonStatus={this.state.activePassButton}\r\n                            passButtonStatus={this.state.activePassButtonStatus}\r\n                            userCards={this.state.userCards}\r\n                            userPoints={this.state.userPoints}\r\n                            userWin={this.state.gameWin}\r\n                            computerPoints={this.state.computerPoints}\r\n                            computerStart={this.handleComputerProcedure}\r\n                            computerWin={this.state.gameWinComputer}\r\n                            remis={this.state.remis}/>\r\n                        </div>:\r\n                        <div className=\"buttonsContainer\">\r\n                            <button className='modeButton' onClick={this.handleTwoRandomCards}><span>Rozpocznij grę</span></button>\r\n                            <button className='modeButtonBack' onClick={backButton}><span>Powrót do menu</span></button>\r\n                        </div>}\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SinglePlayerMode;","import React from \"react\";\r\nimport '../style/MultiGame.css';\r\n\r\nconst ShowCardsSummary=(props)=>{\r\n    const playerCards=props.userTable[props.playerId].userCards;\r\n    const buttonClose = props.buttonClose;\r\n    const showCards=(\r\n        <div className=\"cardsToShowContainer\">\r\n            <div className=\"cardsToShowButton\">\r\n            <button className=\"closeCardsButton\"\r\n                    onClick={()=>buttonClose(props.playerId)}><span>X</span></button>\r\n        </div>\r\n           <div className=\"cardBox\">\r\n               <PlayerCards cards={playerCards}/>\r\n           </div>\r\n\r\n        </div>\r\n    )\r\n    return showCards;\r\n}\r\n\r\nconst PlayerCards=(props)=>{\r\n    const userCards=props.cards.map((card,index)=>(\r\n        <div key={index} className=\"imgBox\">\r\n            <img src={card.image} alt={card.suit}/>\r\n        </div>\r\n    ))\r\n    return userCards;\r\n\r\n}\r\n\r\nconst PlayersTable=(props)=>{\r\n    const players=props.players.map(player =>(\r\n        <div key={player.userId}>\r\n            <span>{player.name}:  <span style={player.userPoints>21? {color: \"red\"}:null}>{player.userPoints}</span></span>\r\n        </div>\r\n    ))\r\n    return players;\r\n}\r\n\r\nconst PlayerContent=(props)=>{\r\n    const activePlayer = props.players.filter(status=>status.userActiveStatus);\r\n    let content;\r\n    if(activePlayer.length===1){\r\n        const playerId=activePlayer[0].userId;\r\n        const playerName=activePlayer[0].name;\r\n        const userCards=activePlayer[0].userCards;\r\n        const userPoints=activePlayer[0].userPoints;\r\n        const userStatus=activePlayer[0].userActiveStatus;\r\n        content=(\r\n            <div className=\"userContainer\">\r\n                <h1>{playerName}</h1>\r\n                <div className=\"userCardContainer\">\r\n                    <PlayerCards cards={userCards}/>\r\n                </div>\r\n                <div className=\"playerScore\">\r\n                    <span style={userPoints>21? {color: \"red\"}:null}>aktualny wynik: {userPoints}</span>\r\n                </div>\r\n                <div className=\"userButtonsContainer\">\r\n                    <button className=\"gameButtons\"\r\n                            disabled={!userStatus}\r\n                            onClick={()=>props.addButton(playerId)}><span>Pobierz kartę</span></button>\r\n                    <button className=\"gameButtons\"\r\n                            disabled={!userStatus}\r\n                            onClick={()=>props.passButton(playerId)}><span>Pas</span></button>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        const usersTable=props.players;\r\n        const summaryCardShow=props.summaryCardShow;\r\n        const buttonShowCards=props.buttonShowCards;\r\n        const buttonClose=props.buttonClose;\r\n        const gameWiner=props.gameWiner;\r\n        const buttonPlayAgain=props.buttonPlayAgain;\r\n        content=(\r\n            <div>\r\n                <div className=\"infoRow\"><h2>Remis: {gameWiner}</h2>\r\n                    <button className=\"gameButtons\" onClick={buttonPlayAgain}>Zagraj ponownie</button>\r\n                </div>\r\n                <h3>Tabela punktów</h3>\r\n                <div className=\"summaryTable\">\r\n                    <SummaryTable players={usersTable}\r\n                                  summaryCardShow={summaryCardShow}\r\n                                  buttonShowCards={buttonShowCards}\r\n                                  buttonClose={buttonClose}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return content;\r\n}\r\n\r\nconst Alert=(props)=>{\r\n    const buttonCloseAlert=props.buttonCloseAlert;\r\n    const allPlayers=props.players;\r\n    const activePlayer = props.players.filter(status=>status.userActiveStatus);\r\n    if(activePlayer.length===1){\r\n        let activeUserId=activePlayer[0].userId;\r\n        let lastPlayerName=allPlayers[activeUserId-1].name;\r\n        const alertContent=(\r\n            <div className=\"alertConstent\">\r\n                <span style={{fontSize: '24px'}}>{lastPlayerName} przegrał, teraz nastąpi kolejka {activePlayer[0].name}</span>\r\n                <button className=\"closeCardsButton\"\r\n                        style={{\r\n                            margin:'auto',\r\n                            marginTop:'3%'\r\n                        }}\r\n                        onClick={buttonCloseAlert}><span>OK</span></button>\r\n            </div>\r\n        )\r\n        return alertContent;\r\n    }\r\n    return null;\r\n}\r\n\r\nconst SummaryTable=(props)=>{\r\n    const space='        ';\r\n    const userTable=props.players;\r\n    const buttonShowCards = props.buttonShowCards;\r\n    const buttonClose = props.buttonClose;\r\n    const summaryPlayers=props.players.map(player =>(\r\n        <div className=\"playerSummaryRow\" key={player.userId}>\r\n           <div className=\"titleAndButton\">\r\n               <span className=\"spanInRow\">{player.name}:{space}<span>{player.userPoints} pkt</span></span>\r\n               <button className=\"gameButtonsInRow\" onClick={()=>buttonShowCards(player.userId)}><span>Zobacz karty gracza</span></button>\r\n           </div>\r\n            {player.showCards? <div className=\"containerForShowCards\">\r\n                <ShowCardsSummary userTable={userTable}\r\n                                                 playerId={player.userId}\r\n                                                 buttonClose={buttonClose}/>\r\n                </div>:null}\r\n\r\n        </div>\r\n    ))\r\n    return summaryPlayers\r\n}\r\n\r\nconst MultiGame=(props)=>{\r\n    const {usersTable,\r\n        addButton,\r\n        passButton,\r\n        gameEnd,\r\n        gameWiner,\r\n        backButton,\r\n    buttonPlayAgain,\r\n        persianEye,\r\n        remis,\r\n        summaryCardShow,\r\n        buttonShowCards,\r\n        buttonClose,\r\n        showAlert,\r\n        buttonCloseAlert}=props;\r\n    return(\r\n        <div>\r\n            <div className=\"backButtonBox\">\r\n                <button className='modeButtonBack' onClick={backButton}><span>Powrót</span></button>\r\n            </div>\r\n            {!gameEnd? <div className=\"playersTable\">\r\n                <h3>Tabela punktów</h3>\r\n                <PlayersTable players={usersTable}/>\r\n            </div>:null}\r\n            {persianEye? <div><h1>Perskie oczko!</h1></div>:null}\r\n            {gameEnd && !remis? <div>\r\n                <div className=\"infoRow\">\r\n                        <h2>Wygrał {gameWiner}</h2>\r\n                    <button className=\"gameButtons\" onClick={buttonPlayAgain}><span>Zagraj ponownie</span></button></div>\r\n                        <h3>Tabela punktów</h3>\r\n                            <div className=\"summaryTable\">\r\n                                <SummaryTable players={usersTable}\r\n                                              summaryCardShow={summaryCardShow}\r\n                                              buttonShowCards={buttonShowCards}\r\n                                              buttonClose={buttonClose}/>\r\n                            </div>\r\n            </div>:null}\r\n            {gameEnd && remis?\r\n                <div>\r\n                    <div className=\"infoRow\"><h2>Remis: {gameWiner}</h2>\r\n                    <button className=\"gameButtons\" onClick={buttonPlayAgain}>Zagraj ponownie</button>\r\n                    </div>\r\n                    <h3>Tabela punktów</h3>\r\n                    <div className=\"summaryTable\">\r\n                        <SummaryTable players={usersTable}\r\n                                      summaryCardShow={summaryCardShow}\r\n                                      buttonShowCards={buttonShowCards}\r\n                                      buttonClose={buttonClose}/>\r\n                    </div>\r\n                </div>:null}\r\n            {!gameEnd && !showAlert? <div className=\"playerContent\">\r\n                <PlayerContent players={usersTable}\r\n                               addButton={addButton}\r\n                               passButton={passButton}\r\n                               summaryCardShow={summaryCardShow}\r\n                               buttonShowCards={buttonShowCards}\r\n                               buttonClose={buttonClose}\r\n                               gameWiner={gameWiner}\r\n                               buttonPlayAgain={buttonPlayAgain}/>\r\n            </div>:null}\r\n            {!gameEnd && showAlert? <div className=\"playerContent\">\r\n              <div><Alert players={usersTable} buttonCloseAlert={buttonCloseAlert}/></div>\r\n            </div>:null}\r\n        </div>\r\n    )\r\n}\r\nexport default MultiGame;","import React from \"react\";\r\nimport MultiGame from \"./MultiGame\";\r\nimport '../style/ModeButton.css';\r\nimport '../style/MultiPlayerMode.css';\r\n\r\n\r\nclass MultiPlayerMode extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            cardDeckMultiGame: props.deck,\r\n            numberOfUsers: 2,\r\n            usersTable:[],\r\n            submit: false,\r\n            gameStart: false,\r\n            gameEnd:false,\r\n            gameWiner:'',\r\n            persianEye:false,\r\n            remis: false,\r\n            infoShow: false,\r\n            summaryCardShow:false,\r\n            showAlert:false,\r\n        }\r\n    }\r\n\r\n    countPoints=(cardValueText)=>{\r\n        let cardValue;\r\n        if(cardValueText === \"JACK\"){ cardValue = 2;}\r\n        else if(cardValueText === \"ACE\"){ cardValue = 11;}\r\n        else if(cardValueText === \"KING\"){ cardValue = 4;}\r\n        else if(cardValueText === \"QUEEN\"){ cardValue = 3;}\r\n        else{\r\n            parseInt(cardValueText)\r\n            cardValue=2;\r\n        }\r\n        return cardValue;\r\n    }\r\n\r\n    handleChange=(e)=>{\r\n        let inputValue=e.target.value;\r\n        if(inputValue>4){\r\n            inputValue=4;\r\n        }\r\n        else if(inputValue<2){\r\n            inputValue=2\r\n        }\r\n        this.setState({\r\n            numberOfUsers: inputValue,\r\n        });\r\n\r\n    }\r\n\r\n    createPlayers=(number)=>{\r\n        let table=[];\r\n        for(let i=0;i<=number-1;i++){\r\n            let arrayForCards=[];\r\n            let cardValueText='';\r\n            let points;\r\n            let pointsFromCards=0;\r\n            let actualAsTable=[];\r\n            let win=false;\r\n            let active=false;\r\n            if(i===0){\r\n                active=true;\r\n            }\r\n            for(let j=0;j<=1;j++){\r\n                let firstCardsIndex = Math.floor(Math.random()*51);\r\n                let firstCard = this.state.cardDeckMultiGame[firstCardsIndex];\r\n                cardValueText=firstCard.value;\r\n                points=this.countPoints(cardValueText);\r\n                pointsFromCards=pointsFromCards+points;\r\n               if(cardValueText===\"ACE\"){\r\n                   actualAsTable.push(firstCard);\r\n               }\r\n               if(actualAsTable.length===2){\r\n                   win=true;\r\n                   this.setState({\r\n                       persianEye:true,\r\n                       gameEnd:true,\r\n                       gameWiner: `Gracz ${i+1}`,\r\n                   })\r\n               }\r\n                arrayForCards.push(firstCard);\r\n            }\r\n            table.push({\r\n                userId:i, name:`Gracz ${i+1}`,userCards:arrayForCards,asTable:actualAsTable,userPoints:pointsFromCards,userActiveStatus:active,gameWin:win, gameLose:false,showCards:false,\r\n            })\r\n        }\r\n        this.setState({\r\n            usersTable: table\r\n        })\r\n    }\r\n\r\n    handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        const playersNumber = this.state.numberOfUsers;\r\n        this.createPlayers(playersNumber);\r\n        this.setState({\r\n            submit: true,\r\n        })\r\n    }\r\n\r\n    handleGameStart=()=>{\r\n        this.setState({\r\n            gameStart:true,\r\n        })\r\n    }\r\n\r\n    handleEndGame=()=>{\r\n        let table = this.state.usersTable;\r\n        for(let i=0;i<=table.length-1;i++){\r\n                table[i].userActiveStatus=false;\r\n        }\r\n        this.setState({\r\n                userTable:table,\r\n        })\r\n\r\n    }\r\n\r\n    handleAddCardButton=(id)=>{\r\n        let usersTable = this.state.usersTable;\r\n        let selectPlayer = usersTable[id];\r\n        let selectUserPoints = selectPlayer.userPoints;\r\n        let selectUserCards=selectPlayer.userCards;\r\n        let selectUserAsTable=selectPlayer.asTable;\r\n        let selectUserGameWin=selectPlayer.gameWin;\r\n        let selectUserActiveStatus=selectPlayer.userActiveStatus;\r\n        let pointsFromCard=0;\r\n        const deck = this.state.cardDeckMultiGame;\r\n        let randomCardIndex = Math.floor(Math.random()*51);\r\n        let addingCard = deck[randomCardIndex];\r\n        pointsFromCard=this.countPoints(addingCard.value);\r\n        selectUserPoints=selectUserPoints+pointsFromCard;\r\n        if(addingCard.value===\"ACE\"){\r\n            selectUserAsTable.push(addingCard);\r\n        }\r\n        selectUserCards.push(addingCard);\r\n        if(selectUserPoints === 21){\r\n            selectUserGameWin=true;\r\n            let playerStatus=selectPlayer.userActiveStatus;\r\n            playerStatus=false;\r\n            usersTable[id].userActiveStatus=playerStatus;\r\n            usersTable[id].userPoints = selectUserPoints;\r\n            usersTable[id].userCards = selectUserCards;\r\n            usersTable[id].asTable=selectUserAsTable;\r\n            usersTable[id].gameWin = selectUserGameWin;\r\n            usersTable[id].userActiveStatus=selectUserActiveStatus;\r\n            this.setState({\r\n                gameEnd:true,\r\n                gameWiner:selectPlayer.name,\r\n                usersTable: usersTable,\r\n            })\r\n            this.handleEndGame()\r\n        }\r\n        else if(selectUserAsTable.length===2){\r\n            selectUserGameWin=true;\r\n            usersTable[id].userPoints = selectUserPoints;\r\n            usersTable[id].userCards = selectUserCards;\r\n            usersTable[id].asTable=selectUserAsTable;\r\n            usersTable[id].gameWin = selectUserGameWin;\r\n            usersTable[id].userActiveStatus=selectUserActiveStatus;\r\n            this.setState({\r\n                gameEnd:true,\r\n                gameWiner:selectPlayer.name,\r\n                usersTable: usersTable,\r\n                persianEye:true,\r\n            })\r\n            this.handleEndGame()\r\n        }\r\n        else if(selectUserPoints>=22 && selectUserAsTable.length!==2){\r\n            selectUserGameWin=false;\r\n            selectUserActiveStatus=false;\r\n            if(selectUserActiveStatus===false && id+1!==usersTable.length){\r\n                this.setState({\r\n                    showAlert: true,\r\n                })\r\n            }\r\n            usersTable[id].userPoints = selectUserPoints;\r\n            usersTable[id].userCards = selectUserCards;\r\n            usersTable[id].asTable=selectUserAsTable;\r\n            usersTable[id].gameWin = selectUserGameWin;\r\n            usersTable[id].userActiveStatus=selectUserActiveStatus;\r\n            usersTable[id].gameLose=true;\r\n            if(id+1!==usersTable.length){\r\n                usersTable[id+1].userActiveStatus=true;\r\n                this.setState({\r\n                    usersTable: usersTable\r\n                })\r\n            }\r\n            this.setState({\r\n                usersTable: usersTable\r\n            })\r\n            if(id===usersTable.length-1){\r\n                this.handlePassButton(id);\r\n            }\r\n        }\r\n        else{\r\n            usersTable[id].userPoints = selectUserPoints;\r\n            usersTable[id].userCards = selectUserCards;\r\n            usersTable[id].asTable=selectUserAsTable;\r\n            this.setState({\r\n                usersTable: usersTable\r\n            })\r\n        }\r\n    }\r\n\r\n    handlePassButton=(id)=>{\r\n        let usersTableActive = this.state.usersTable;\r\n        let selectPlayer = usersTableActive[id];\r\n        let playerStatus=selectPlayer.userActiveStatus;\r\n        playerStatus=false;\r\n        usersTableActive[id].userActiveStatus = playerStatus;\r\n        this.setState({\r\n            usersTable: usersTableActive\r\n        })\r\n        if(id+1!==usersTableActive.length){\r\n            usersTableActive[id+1].userActiveStatus = true;\r\n            this.setState({\r\n                usersTable: usersTableActive\r\n            })\r\n        }\r\n        else{\r\n            //sprawdź wyniki\r\n            let remis;\r\n            let nameWinner='';\r\n            const usersToCheck=usersTableActive.filter(status=>!status.gameLose && !status.gameWin); // to są ci, którzy mięli <21 pkt\r\n            if(usersToCheck.length===1){\r\n                let winName = usersToCheck[0].name;\r\n                let winID=usersToCheck[0].userId;\r\n                usersTableActive[winID].gameWin = true;\r\n                this.setState({\r\n                    gameEnd:true,\r\n                    gameWiner:winName,\r\n                    usersTable: usersTableActive\r\n                })\r\n            }\r\n            else if(usersToCheck.length===2){\r\n                let userPoints1 = usersToCheck[0].userPoints;\r\n                let user1Id=usersToCheck[0].userId;\r\n                let user1name=usersToCheck[0].name;\r\n                let userPoints2=usersToCheck[1].userPoints;\r\n                let user2Id=usersToCheck[1].userId;\r\n                let user2name=usersToCheck[1].name;\r\n                if(userPoints1>userPoints2){\r\n                    usersToCheck[0].gameWin = true;\r\n                    usersTableActive[user1Id].gameWin=true;\r\n                    nameWinner=user1name;\r\n                }\r\n                else if(userPoints1<userPoints2){\r\n                    usersToCheck[1].gameWin = true;\r\n                    usersTableActive[user2Id].gameWin=true;\r\n                    nameWinner=user2name;\r\n                }\r\n                else{\r\n                    remis=true;\r\n                    nameWinner= user1name + '  '+user2name;\r\n                }\r\n                this.setState({\r\n                        gameEnd:true,\r\n                        gameWiner:nameWinner,\r\n                        remis:remis,\r\n                        usersTable: usersTableActive\r\n\r\n                })\r\n            }\r\n            else if(usersToCheck.length>2){\r\n                usersToCheck.sort((a,b)=>b.userPoints-a.userPoints);\r\n                let firstValue=usersToCheck[0].userPoints;\r\n                let firstValueId=usersToCheck[0].userId;\r\n                let firstValueName=usersToCheck[0].name;\r\n                let winnerTab=[];\r\n                winnerTab.push(usersToCheck[0]);\r\n                for(let i=1;i<=usersToCheck.length-1;i++){\r\n\r\n                    if(firstValue===usersToCheck[i].userPoints){\r\n                        winnerTab.push(usersToCheck[i]);\r\n                    }\r\n                }\r\n                if(winnerTab.length>1){\r\n                    for(let j=0;j<=winnerTab.length-1;j++){\r\n                        let id = winnerTab[j].userId;\r\n                        usersTableActive[id].gameWin = true;\r\n                        nameWinner=nameWinner+' '+winnerTab[j].name+' ';\r\n                    }\r\n                    this.setState({\r\n                        gameEnd:true,\r\n                        gameWiner:nameWinner,\r\n                        usersTable: usersTableActive\r\n                    })\r\n                }\r\n                else{\r\n                    usersTableActive[firstValueId].gameWin = true;\r\n                    this.setState({\r\n                        gameEnd:true,\r\n                        gameWiner:firstValueName,\r\n                        usersTable: usersTableActive\r\n                    })\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    handleBackButton=()=>{\r\n        this.setState({\r\n            usersTable:[],\r\n            gameEnd:false,\r\n            gameStart:false,\r\n            submit: false,\r\n            remis: false,\r\n            gameWiner:'',\r\n            persianEye:false,\r\n        })\r\n    }\r\n\r\n    handlePlayAgain=()=>{\r\n        const n=this.state.numberOfUsers;\r\n        this.createPlayers(n);\r\n        this.setState({\r\n            gameStart:false,\r\n            submit: false,\r\n            gameEnd:false,\r\n            gameWiner:'',\r\n            persianEye:false,\r\n            remis: false\r\n        })\r\n\r\n    }\r\n\r\n    handleShowInfo=()=>{\r\n        this.setState({\r\n            infoShow: true,\r\n        })\r\n    }\r\n\r\n    handleHideInfo=()=>{\r\n        setInterval(\r\n            this.setState({\r\n            infoShow: false,\r\n        }), 3000);\r\n\r\n    }\r\n\r\n    handleShowCards=(id)=>{\r\n        let usersTable =this.state.usersTable;\r\n        usersTable[id].showCards = true;\r\n        this.setState({\r\n            usersTable: usersTable,\r\n        })\r\n    }\r\n\r\n    handleButtonClose=(id)=>{\r\n        let usersTable =this.state.usersTable;\r\n        usersTable[id].showCards = false;\r\n        this.setState({\r\n            usersTable: usersTable,\r\n        })\r\n    }\r\n\r\n    handleButtonCloseAlert=()=>{\r\n        this.setState({\r\n            showAlert: false,\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const {backButton} = this.props;\r\n        const {submit,\r\n            gameStart,\r\n            usersTable,\r\n            gameEnd,\r\n            gameWiner,\r\n            persianEye,\r\n            remis,infoShow,\r\n            summaryCardShow,\r\n            showAlert}=this.state;\r\n\r\n        return(\r\n            <div>\r\n                <div className=\"gameTitle\">\r\n                    <h1> Rozgrywka dla wielu graczy</h1>\r\n                </div>\r\n                <div className=\"contentContainer\">\r\n                {!gameStart?  <div className=\"formContainer\">\r\n                    <form onSubmit={this.handleSubmit} noValidate>\r\n                       <div className=\"labelAndInputBox\">\r\n                           <label htmlFor=\"numberOfUsers\">\r\n                               <span className=\"inputLabel\">Wybierz liczbę graczy:</span></label>\r\n                           <input\r\n                               type=\"number\"\r\n                               id=\"numberOfUsera\"\r\n                               name=\"usersNumber\"\r\n                               step=\"1\"\r\n                               min=\"2\"\r\n                               max=\"4\"\r\n                               value={this.state.numberOfUsers}\r\n                               onChange={this.handleChange}\r\n                               disabled={submit}/>\r\n                            <div className=\"infoBox\"\r\n                                 onMouseEnter={() => this.handleShowInfo()}\r\n                                 onMouseLeave={() =>this.handleHideInfo()}>\r\n                                <div className=\"infoInBox\">\r\n                                    <span>i</span>\r\n                                </div>\r\n                            </div>\r\n                       </div>\r\n                        {infoShow && (\r\n                            <div className=\"infoText\">W trybie dla wielu graczy minimalna ilość graczy wynosi 2 a maksymalna 4. Po wybraniu liczby graczy należy zatwierdzić swój wybór wybierając przycisk \"ZATWIERDŹ LICZBĘ GRACZY\"</div>\r\n                        )}\r\n                        <div className=\"buttonsContainer\">\r\n                            <button className=\"submitButtons\"\r\n                                    disabled={submit}\r\n                            style={infoShow && !submit? {  boxShadow: '0px 20px 20px 1px rgba(99, 212, 113, .5)', transform: 'translateY(25%)'}:null}>\r\n                                <span>Zatwierdź liczbę graczy</span></button>\r\n                        </div>\r\n\r\n                    </form>\r\n                    <div className=\"buttonsContainer\" style={infoShow? {transform: 'translateY(25%)'}:null}>\r\n                        <button className='modeButton' disabled={!submit} onClick={this.handleGameStart}><span>Rozpocznij Grę</span></button>\r\n                        <button className='modeButtonBack' onClick={backButton}><span>Powrót do menu</span></button>\r\n                    </div>\r\n            </div>:\r\n                    <div>\r\n\r\n                        <MultiGame\r\n                            usersTable={usersTable}\r\n                            addButton={this.handleAddCardButton}\r\n                            passButton={this.handlePassButton}\r\n                            gameEnd={gameEnd}\r\n                            gameWiner={gameWiner}\r\n                            backButton={this.handleBackButton}\r\n                            buttonPlayAgain={this.handlePlayAgain}\r\n                            persianEye={persianEye}\r\n                            remis={remis}\r\n                            buttonShowCards={this.handleShowCards}\r\n                            summaryCardShow={summaryCardShow}\r\n                            buttonClose={this.handleButtonClose}\r\n                            showAlert={showAlert}\r\n                            buttonCloseAlert={this.handleButtonCloseAlert}\r\n                            />\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MultiPlayerMode;","import React from 'react';\nimport './App.css';\nimport ModeButton from \"./components/ModeButton\";\nimport SinglePlayerMode from \"./components/singleMode/SinglePlayerMode\";\nimport MultiPlayerMode from \"./components/multiMode/MultiPlayerMode\";\n\n\nclass App extends React.Component {\nstate={\n    singleMode: false,\n    multiMode: false,\n    cardDeck:[],\n\n}\n\n    handleSingleGame=()=>{\n        this.setState({\n            singleMode: true,\n        })\n    }\n\n    handleMultiGame=()=>{\n        this.setState({\n            multiMode: true,\n        })\n    }\n\n    handleBackButton=()=>{\n        this.setState({\n            singleMode: false,\n            multiMode: false,\n        })\n    }\n\n    componentDidMount() {\n        const query =\"https://deckofcardsapi.com/api/deck/new/draw/?count=51\";\n        fetch(query).then(response=>{\n            if(response.ok){\n                return response\n            }\n            throw Error(response.status)\n        }).then(response => response.json())\n            .then(data => {\n                this.setState({\n                    cardDeck: data.cards,\n                })})\n            .catch(error=>console.log(error))\n    }\n\n\n    render(){\n      const singleModeText = \"Pojedyńczy gracz\";\n      const multiModeText = \"Wielu graczy\";\n      return (\n          <div className=\"App\">\n              <div className=\"AppContent\">\n              {\n                  this.state.singleMode===false && this.state.multiMode===false ?\n                      <div className=\"modeGameContainer\">\n                          <h1>Wybierz tryb gry</h1>\n                          <div className=\"buttonsContainer\">\n                              <ModeButton text={singleModeText} click={this.handleSingleGame}/>\n                              <ModeButton text={multiModeText} click={this.handleMultiGame}/>\n                          </div>\n                          <div>\n                              <div>\n\n                              </div>\n                          </div>\n                      </div>\n                      : null\n              }\n              {this.state.singleMode ? <SinglePlayerMode\n                  backButton={this.handleBackButton}\n                  deck={this.state.cardDeck}/> : null}\n              {this.state.multiMode ? <MultiPlayerMode\n                  backButton={this.handleBackButton}\n                  deck={this.state.cardDeck}/> : null}\n              </div>\n          </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}